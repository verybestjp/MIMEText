{"version":3,"file":"mimetext.node.es.js","sources":["../src/MIMETextError.ts","../src/Mailbox.ts","../src/MIMEMessageHeader.ts","../src/MIMEMessageContent.ts","../src/MIMEMessage.ts","../src/entrypoints/node.ts"],"sourcesContent":["export class MIMETextError extends Error {\n    override name = ''\n    description = ''\n\n    constructor (message: string, description = '') {\n        super(description)\n\n        this.name = message\n        this.description = description\n    }\n}\n","import { MIMETextError } from './MIMETextError.js'\n\nexport class Mailbox {\n    reSpecCompliantAddr = /(([^<>\\r\\n]+)\\s)?<[^\\r\\n]+>/\n    name = ''\n    addr = ''\n    type: MailboxType = 'To'\n\n    constructor (input: MailboxAddrObject | string, config: MailboxConfig = { type: 'To' }) {\n        this.type = config.type\n\n        this.parse(input)\n    }\n\n    getAddrDomain (): string {\n        if (this.addr.includes('@')) {\n            const arr = this.addr.split('@')\n            if (arr.length > 1) return arr[1]!\n        }\n        return ''\n    }\n\n    dump (): string {\n        return this.name.length > 0 ? `\"${this.name}\" <${this.addr}>` : `<${this.addr}>`\n    }\n\n    parse (input: MailboxAddrObject | string): this {\n        if (this.isMailboxAddrObject(input)) {\n            this.addr = input.addr\n            if (typeof input.name === 'string') this.name = input.name\n            if (typeof input.type === 'string') this.type = input.type\n            return this\n        }\n\n        if (this.isMailboxAddrText(input)) {\n            const text = input.trim()\n            if (text.startsWith('<') && text.endsWith('>')) {\n                this.addr = text.slice(1, -1)\n                return this\n            }\n            const arr = text.split(' <') as [string, string]\n            arr[0] = /^(\"|')/.test(arr[0]) ? arr[0].slice(1) : arr[0]\n            arr[0] = /(\"|')$/.test(arr[0]) ? arr[0].slice(0, -1) : arr[0]\n            arr[1] = arr[1].slice(0, -1)\n            this.name = arr[0]\n            this.addr = arr[1]\n            return this\n        }\n\n        if (typeof input === 'string') {\n            this.addr = input\n            return this\n        }\n\n        throw new MIMETextError('MIMETEXT_INVALID_MAILBOX', 'Couldn\\'t recognize the input.')\n    }\n\n    isMailboxAddrText (v: unknown): boolean {\n        return typeof v === 'string' && this.reSpecCompliantAddr.test(v)\n    }\n\n    isMailboxAddrObject (v: unknown): v is MailboxAddrObject {\n        return this.isObject(v) && Object.hasOwn(v, 'addr')\n    }\n\n    isObject (v: unknown): v is object {\n        return (!!v) && (v.constructor === Object)\n    }\n}\n\nexport interface MailboxConfig {\n    type: MailboxType\n}\nexport interface MailboxAddrObject {\n    addr: string\n    name?: string\n    type?: MailboxType\n}\nexport type MailboxType = 'To' | 'From' | 'Cc' | 'Bcc'\n","import type { EnvironmentContext } from \"./MIMEMessage\";\nimport { MIMETextError } from \"./MIMETextError.js\";\nimport { Mailbox } from \"./Mailbox.js\";\n\n/*\n    Headers are based on: https://www.rfc-editor.org/rfc/rfc4021#section-2.1\n    (Some are ignored as they can be added later or as a custom header.)\n*/\n\nexport class MIMEMessageHeader {\n    envctx: EnvironmentContext;\n    fields: HeaderField[] = [\n        {\n            name: \"Date\",\n            generator: () =>\n                new Date().toUTCString().replace(/GMT|UTC/gi, \"+0000\"),\n        },\n        {\n            name: \"From\",\n            required: true,\n            validate: (v: unknown) => this.validateMailboxSingle(v),\n            dump: (v: unknown) => this.dumpMailboxSingle(v),\n        },\n        {\n            name: \"Sender\",\n            validate: (v: unknown) => this.validateMailboxSingle(v),\n            dump: (v: unknown) => this.dumpMailboxSingle(v),\n        },\n        {\n            name: \"Reply-To\",\n            validate: (v: unknown) => this.validateMailboxSingle(v),\n            dump: (v: unknown) => this.dumpMailboxSingle(v),\n        },\n        {\n            name: \"To\",\n            validate: (v: unknown) => this.validateMailboxMulti(v),\n            dump: (v: unknown) => this.dumpMailboxMulti(v),\n        },\n        {\n            name: \"Cc\",\n            validate: (v: unknown) => this.validateMailboxMulti(v),\n            dump: (v: unknown) => this.dumpMailboxMulti(v),\n        },\n        {\n            name: \"Bcc\",\n            validate: (v: unknown) => this.validateMailboxMulti(v),\n            dump: (v: unknown) => this.dumpMailboxMulti(v),\n        },\n        {\n            name: \"Message-ID\",\n            generator: () => {\n                const randomstr = Math.random().toString(36).slice(2);\n                const from = this.fields.filter(\n                    (obj) => obj.name === \"From\",\n                )[0]!.value as Mailbox;\n                const domain = from.getAddrDomain();\n                return \"<\" + randomstr + \"@\" + domain + \">\";\n            },\n        },\n        {\n            name: \"Subject\",\n            required: true,\n            dump: (v: unknown) => {\n                return typeof v === \"string\"\n                    ? \"=?utf-8?B?\" + this.envctx.toBase64(v) + \"?=\"\n                    : \"\";\n            },\n        },\n        {\n            name: \"MIME-Version\",\n            generator: () => \"1.0\",\n        },\n    ];\n\n    constructor(envctx: EnvironmentContext) {\n        this.envctx = envctx;\n    }\n\n    dump(): string {\n        let lines = \"\";\n\n        for (const field of this.fields) {\n            if (field.disabled) continue;\n            const isValueDefinedByUser =\n                field.value !== undefined && field.value !== null;\n            if (!isValueDefinedByUser && field.required) {\n                throw new MIMETextError(\n                    \"MIMETEXT_MISSING_HEADER\",\n                    `The \"${field.name}\" header is required.`,\n                );\n            }\n            if (!isValueDefinedByUser && typeof field.generator !== \"function\")\n                continue;\n            if (!isValueDefinedByUser && typeof field.generator === \"function\")\n                field.value = field.generator();\n            const strval =\n                Object.hasOwn(field, \"dump\") && typeof field.dump === \"function\"\n                    ? field.dump(field.value)\n                    : typeof field.value === \"string\"\n                      ? field.value\n                      : \"\";\n            lines += `${field.name}: ${strval}${this.envctx.eol}`;\n        }\n\n        return lines.slice(0, -1 * this.envctx.eol.length);\n    }\n\n    toObject(): HeadersObject {\n        return this.fields.reduce((memo: HeadersObject, item) => {\n            memo[item.name] = item.value;\n            return memo;\n        }, {});\n    }\n\n    get(name: string): string | Mailbox | Mailbox[] | undefined {\n        const fieldMatcher = (obj: HeaderField): boolean =>\n            obj.name.toLowerCase() === name.toLowerCase();\n        const ind = this.fields.findIndex(fieldMatcher);\n\n        return ind !== -1 ? this.fields[ind]!.value : undefined;\n    }\n\n    set(name: string, value: string | Mailbox | Mailbox[]): HeaderField {\n        const fieldMatcher = (obj: HeaderField): boolean =>\n            obj.name.toLowerCase() === name.toLowerCase();\n        const isCustomHeader = !this.fields.some(fieldMatcher);\n\n        if (!isCustomHeader) {\n            const ind = this.fields.findIndex(fieldMatcher);\n            const field = this.fields[ind]!;\n            if (field.validate && !field.validate(value)) {\n                throw new MIMETextError(\n                    \"MIMETEXT_INVALID_HEADER_VALUE\",\n                    `The value for the header \"${name}\" is invalid.`,\n                );\n            }\n            this.fields[ind]!.value = value;\n            return this.fields[ind]!;\n        }\n\n        return this.setCustom({\n            name: name,\n            value: value,\n            custom: true,\n            dump: (v: unknown) => (typeof v === \"string\" ? v : \"\"),\n        });\n    }\n\n    setCustom(obj: HeaderField): HeaderField {\n        if (this.isHeaderField(obj)) {\n            if (typeof obj.value !== \"string\") {\n                throw new MIMETextError(\n                    \"MIMETEXT_INVALID_HEADER_FIELD\",\n                    \"Custom header must have a value.\",\n                );\n            }\n            this.fields.push(obj);\n            return obj;\n        }\n\n        throw new MIMETextError(\n            \"MIMETEXT_INVALID_HEADER_FIELD\",\n            \"Invalid input for custom header. It must be in type of HeaderField.\",\n        );\n    }\n\n    validateMailboxSingle(v: unknown): v is Mailbox {\n        return v instanceof Mailbox;\n    }\n\n    validateMailboxMulti(v: unknown): boolean {\n        return v instanceof Mailbox || this.isArrayOfMailboxes(v);\n    }\n\n    dumpMailboxMulti(v: unknown): string {\n        const dump = (item: Mailbox): string =>\n            item.name.length === 0\n                ? item.dump()\n                : `=?utf-8?B?${this.envctx.toBase64(item.name)}?= <${item.addr}>`;\n        return this.isArrayOfMailboxes(v)\n            ? v.map(dump).join(`,${this.envctx.eol} `)\n            : v instanceof Mailbox\n              ? dump(v)\n              : \"\";\n    }\n\n    dumpMailboxSingle(v: unknown): string {\n        const dump = (item: Mailbox): string =>\n            item.name.length === 0\n                ? item.dump()\n                : `=?utf-8?B?${this.envctx.toBase64(item.name)}?= <${item.addr}>`;\n        return v instanceof Mailbox ? dump(v) : \"\";\n    }\n\n    isHeaderField(v: unknown): v is HeaderField {\n        const validProps = [\n            \"name\",\n            \"value\",\n            \"dump\",\n            \"required\",\n            \"disabled\",\n            \"generator\",\n            \"custom\",\n        ];\n        if (this.isObject(v)) {\n            const h = v as HeaderField;\n            if (\n                Object.hasOwn(h, \"name\") &&\n                typeof h.name === \"string\" &&\n                h.name.length > 0\n            ) {\n                if (\n                    !Object.keys(h).some((prop) => !validProps.includes(prop))\n                ) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    isObject(v: unknown): v is object {\n        return !!v && v.constructor === Object;\n    }\n\n    isArrayOfMailboxes(v: unknown): v is Mailbox[] {\n        return (\n            this.isArray(v) &&\n            v.every((item: unknown) => item instanceof Mailbox)\n        );\n    }\n\n    isArray(v: unknown): v is never[] {\n        return !!v && v.constructor === Array;\n    }\n}\n\nexport class MIMEMessageContentHeader extends MIMEMessageHeader {\n    override fields = [\n        {\n            name: \"Content-ID\",\n        },\n        {\n            name: \"Content-Type\",\n        },\n        {\n            name: \"Content-Transfer-Encoding\",\n        },\n        {\n            name: \"Content-Disposition\",\n        },\n    ];\n\n    constructor(envctx: EnvironmentContext) {\n        super(envctx);\n    }\n}\n\nexport type HeadersObject = Record<\n    string,\n    string | Mailbox | Mailbox[] | undefined\n>;\nexport interface HeaderField {\n    name: string;\n    dump?: (v: string | Mailbox | Mailbox[] | undefined) => string;\n    value?: string | Mailbox | Mailbox[] | undefined;\n    validate?: (v: unknown) => boolean;\n    required?: boolean;\n    disabled?: boolean;\n    generator?: () => string;\n    custom?: boolean;\n}\n","import type { EnvironmentContext } from './MIMEMessage'\nimport type { Mailbox } from './Mailbox'\nimport { type HeadersObject, MIMEMessageContentHeader } from './MIMEMessageHeader.js'\n\nexport class MIMEMessageContent {\n    envctx: EnvironmentContext\n    headers\n    data\n\n    constructor (envctx: EnvironmentContext, data: string, headers = {}) {\n        this.envctx = envctx\n        this.headers = new MIMEMessageContentHeader(this.envctx)\n        this.data = data\n        this.setHeaders(headers)\n    }\n\n    dump (): string {\n        const eol = this.envctx.eol\n        return this.headers.dump() + eol + eol + this.data\n    }\n\n    isAttachment (): boolean {\n        const disposition = this.headers.get('Content-Disposition')\n        return typeof disposition === 'string' && disposition.includes('attachment')\n    }\n\n    isInlineAttachment (): boolean {\n        const disposition = this.headers.get('Content-Disposition')\n        return typeof disposition === 'string' && disposition.includes('inline')\n    }\n\n    setHeader (name: string, value: string | Mailbox | Mailbox[]): string {\n        this.headers.set(name, value)\n        return name\n    }\n\n    getHeader (name: string): string | Mailbox | Mailbox[] | undefined {\n        return this.headers.get(name)\n    }\n\n    setHeaders (obj: Record<string, string | Mailbox | Mailbox[]>): string[] {\n        return Object.keys(obj).map((prop) => this.setHeader(prop, obj[prop]!))\n    }\n\n    getHeaders (): HeadersObject {\n        return this.headers.toObject()\n    }\n}\n","import type { MailboxAddrObject, MailboxConfig } from './Mailbox.js'\n\nimport { MIMETextError } from './MIMETextError.js'\nimport { type HeadersObject, MIMEMessageHeader } from './MIMEMessageHeader.js'\nimport { Mailbox } from './Mailbox.js'\nimport { MIMEMessageContent } from './MIMEMessageContent.js'\n\nexport class MIMEMessage {\n    envctx: EnvironmentContext\n    headers: MIMEMessageHeader\n    boundaries: Boundaries = { mixed: '', alt: '', related: '' }\n    validTypes = ['text/html', 'text/plain']\n    validContentTransferEncodings = ['7bit', '8bit', 'binary', 'quoted-printable', 'base64']\n    messages: MIMEMessageContent[] = []\n\n    constructor (envctx: EnvironmentContext) {\n        this.envctx = envctx\n        this.headers = new MIMEMessageHeader(this.envctx)\n        this.messages = []\n\n        this.generateBoundaries()\n    }\n\n    asRaw (): string {\n        const eol = this.envctx.eol\n        const lines = this.headers.dump()\n\n        const plaintext = this.getMessageByType('text/plain')\n        const html = this.getMessageByType('text/html')\n        const primaryMessage = html ?? (plaintext ?? undefined)\n\n        if (primaryMessage === undefined) {\n            throw new MIMETextError('MIMETEXT_MISSING_BODY', 'No content added to the message.')\n        }\n\n        const hasAttachments = this.hasAttachments()\n        const hasInlineAttachments = this.hasInlineAttachments()\n\n        const structure = hasInlineAttachments && hasAttachments\n            ? 'mixed+related'\n            : hasAttachments\n                ? 'mixed'\n                : hasInlineAttachments\n                    ? 'related'\n                    : plaintext && html\n                        ? 'alternative'\n                        : ''\n\n        if (structure === 'mixed+related') {\n            const attachments = this.getAttachments()\n                .map((a) => '--' + this.boundaries.mixed + eol + a.dump() + eol + eol)\n                .join('')\n                .slice(0, -1 * eol.length)\n            const inlineAttachments = this.getInlineAttachments()\n                .map((a) => '--' + this.boundaries.related + eol + a.dump() + eol + eol)\n                .join('')\n                .slice(0, -1 * eol.length)\n            return lines + eol +\n                'Content-Type: multipart/mixed; boundary=' + this.boundaries.mixed + eol +\n                eol +\n                '--' + this.boundaries.mixed + eol +\n                'Content-Type: multipart/related; boundary=' + this.boundaries.related + eol +\n                eol +\n                this.dumpTextContent(plaintext, html, this.boundaries.related) + eol +\n                eol +\n                inlineAttachments +\n                '--' + this.boundaries.related + '--' + eol +\n                attachments +\n                '--' + this.boundaries.mixed + '--'\n        } else if (structure === 'mixed') {\n            const attachments = this.getAttachments()\n                .map((a) => '--' + this.boundaries.mixed + eol + a.dump() + eol + eol)\n                .join('')\n                .slice(0, -1 * eol.length)\n            return lines + eol +\n                'Content-Type: multipart/mixed; boundary=' + this.boundaries.mixed + eol +\n                eol +\n                this.dumpTextContent(plaintext, html, this.boundaries.mixed) + eol +\n                (plaintext && html ? '' : eol) +\n                attachments +\n                '--' + this.boundaries.mixed + '--'\n        } else if (structure === 'related') {\n            const inlineAttachments = this.getInlineAttachments()\n                .map((a) => '--' + this.boundaries.related + eol + a.dump() + eol + eol)\n                .join('')\n                .slice(0, -1 * eol.length)\n            return lines + eol +\n                'Content-Type: multipart/related; boundary=' + this.boundaries.related + eol +\n                eol +\n                this.dumpTextContent(plaintext, html, this.boundaries.related) + eol +\n                eol +\n                inlineAttachments +\n                '--' + this.boundaries.related + '--'\n        } else if (structure === 'alternative') {\n            return lines + eol +\n                'Content-Type: multipart/alternative; boundary=' + this.boundaries.alt + eol +\n                eol +\n                this.dumpTextContent(plaintext, html, this.boundaries.alt) + eol +\n                eol +\n                '--' + this.boundaries.alt + '--'\n        } else {\n            return lines + eol + primaryMessage.dump()\n        }\n    }\n\n    asEncoded (): string {\n        return this.envctx.toBase64WebSafe(this.asRaw())\n    }\n\n    dumpTextContent (plaintext: MIMEMessageContent | undefined, html: MIMEMessageContent | undefined, boundary: string): string {\n        const eol = this.envctx.eol\n        const primaryMessage = html ?? plaintext\n\n        let data = ''\n\n        if (plaintext && html && (this.hasInlineAttachments() || this.hasAttachments())) {\n            data = '--' + boundary + eol +\n                'Content-Type: multipart/alternative; boundary=' + this.boundaries.alt + eol +\n                eol +\n                '--' + this.boundaries.alt + eol +\n                plaintext.dump() + eol +\n                eol +\n                '--' + this.boundaries.alt + eol +\n                html.dump() + eol +\n                eol +\n                '--' + this.boundaries.alt + '--'\n        } else if (plaintext && html) {\n            data = '--' + boundary + eol +\n                plaintext.dump() + eol +\n                eol +\n                '--' + boundary + eol +\n                html.dump()\n        } else {\n            data = '--' + boundary + eol +\n                (primaryMessage!).dump()\n        }\n\n        return data\n    }\n\n    hasInlineAttachments (): boolean {\n        return this.messages.some((msg) => msg.isInlineAttachment())\n    }\n\n    hasAttachments (): boolean {\n        return this.messages.some((msg) => msg.isAttachment())\n    }\n\n    getAttachments (): MIMEMessageContent[] | [] {\n        const matcher = (msg: MIMEMessageContent): boolean => msg.isAttachment()\n        return this.messages.some(matcher) ? this.messages.filter(matcher) : []\n    }\n\n    getInlineAttachments (): MIMEMessageContent[] | [] {\n        const matcher = (msg: MIMEMessageContent): boolean => msg.isInlineAttachment()\n        return this.messages.some(matcher) ? this.messages.filter(matcher) : []\n    }\n\n    getMessageByType (type: string): MIMEMessageContent | undefined {\n        const matcher = (msg: MIMEMessageContent): boolean => !msg.isAttachment() && !msg.isInlineAttachment() && (msg.getHeader('Content-Type') as string || '').includes(type)\n        return this.messages.some(matcher) ? this.messages.filter(matcher)[0] : undefined\n    }\n\n    addAttachment (opts: AttachmentOptions): MIMEMessageContent {\n        if (!this.isObject(opts.headers)) opts.headers = {}\n\n        if (typeof opts.filename !== 'string') {\n            throw new MIMETextError('MIMETEXT_MISSING_FILENAME', 'The property \"filename\" must exist while adding attachments.')\n        }\n\n        let type = (opts.headers['Content-Type'] ?? opts.contentType) || 'none'\n        if (this.envctx.validateContentType(type) === false) {\n            throw new MIMETextError('MIMETEXT_INVALID_MESSAGE_TYPE', `You specified an invalid content type \"${type}\".`)\n        }\n\n        const encoding = (opts.headers['Content-Transfer-Encoding'] ?? opts.encoding) ?? 'base64'\n        if (!this.validContentTransferEncodings.includes(encoding)) {\n            type = 'application/octet-stream'\n        }\n\n        const contentId = opts.headers['Content-ID']\n        if (typeof contentId === 'string' && contentId.length > 2 && !contentId.startsWith('<') && !contentId.endsWith('>')) {\n            opts.headers['Content-ID'] = '<' + opts.headers['Content-ID'] + '>'\n        }\n\n        const disposition = opts.inline ? 'inline' : 'attachment'\n\n        opts.headers = Object.assign({}, opts.headers, {\n            'Content-Type': `${type}; name=\"${opts.filename}\"`,\n            'Content-Transfer-Encoding': encoding,\n            'Content-Disposition': `${disposition}; filename=\"${opts.filename}\"`\n        })\n\n        return this._addMessage({ data: opts.data, headers: opts.headers })\n    }\n\n    addMessage (opts: ContentOptions): MIMEMessageContent {\n        if (!this.isObject(opts.headers)) opts.headers = {}\n\n        let type = (opts.headers['Content-Type'] ?? opts.contentType) || 'none'\n        if (!this.validTypes.includes(type)) {\n            throw new MIMETextError('MIMETEXT_INVALID_MESSAGE_TYPE', `Valid content types are ${this.validTypes.join(', ')} but you specified \"${type}\".`)\n        }\n\n        const encoding = (opts.headers['Content-Transfer-Encoding'] ?? opts.encoding) ?? '7bit'\n        if (!this.validContentTransferEncodings.includes(encoding)) {\n            type = 'application/octet-stream'\n        }\n\n        const charset = opts.charset ?? 'UTF-8'\n\n        opts.headers = Object.assign({}, opts.headers, {\n            'Content-Type': `${type}; charset=${charset}`,\n            'Content-Transfer-Encoding': encoding\n        })\n\n        return this._addMessage({ data: opts.data, headers: opts.headers })\n    }\n\n    private _addMessage (opts: { data: string, headers: ContentHeaders }): MIMEMessageContent {\n        const msg = new MIMEMessageContent(this.envctx, opts.data, opts.headers)\n\n        this.messages.push(msg)\n\n        return msg\n    }\n\n    setSender (input: MailboxAddrObject | string, config: MailboxConfig = { type: 'From' }): Mailbox {\n        const mailbox = new Mailbox(input, config)\n        this.setHeader('From', mailbox)\n        return mailbox\n    }\n\n    getSender (): Mailbox | undefined {\n        return this.getHeader('From') as Mailbox\n    }\n\n    setRecipients (input: MailboxAddrObject | string | MailboxAddrObject[] | string[], config: MailboxConfig = { type: 'To' }): Mailbox[] {\n        const arr = !this.isArray(input) ? [input] : input\n        const recs = arr.map((_input) => new Mailbox(_input, config))\n        this.setHeader(config.type, recs)\n        return recs\n    }\n\n    getRecipients (config: MailboxConfig = { type: 'To' }): Mailbox | Mailbox[] | undefined {\n        return this.getHeader(config.type) as Mailbox | Mailbox[] | undefined\n    }\n\n    setRecipient (input: MailboxAddrObject | string | MailboxAddrObject[] | string[], config: MailboxConfig = { type: 'To' }): Mailbox[] {\n        return this.setRecipients(input, config)\n    }\n\n    setTo (input: MailboxAddrObject | string | MailboxAddrObject[] | string[], config: MailboxConfig = { type: 'To' }): Mailbox[] {\n        return this.setRecipients(input, config)\n    }\n\n    setCc (input: MailboxAddrObject | string | MailboxAddrObject[] | string[], config: MailboxConfig = { type: 'Cc' }): Mailbox[] {\n        return this.setRecipients(input, config)\n    }\n\n    setBcc (input: MailboxAddrObject | string | MailboxAddrObject[] | string[], config: MailboxConfig = { type: 'Bcc' }): Mailbox[] {\n        return this.setRecipients(input, config)\n    }\n\n    setSubject (value: string): string {\n        this.setHeader('subject', value)\n        return value\n    }\n\n    getSubject (): string | undefined {\n        return this.getHeader('subject') as string\n    }\n\n    setHeader (name: string, value: string | Mailbox | Mailbox[]): string {\n        this.headers.set(name, value)\n        return name\n    }\n\n    getHeader (name: string): string | Mailbox | Mailbox[] | undefined {\n        return this.headers.get(name)\n    }\n\n    setHeaders (obj: Record<string, string | Mailbox | Mailbox[]>): string[] {\n        return Object.keys(obj).map((prop) => this.setHeader(prop, obj[prop]!))\n    }\n\n    getHeaders (): HeadersObject {\n        return this.headers.toObject()\n    }\n\n    toBase64 (v: string): string {\n        return this.envctx.toBase64(v)\n    }\n\n    toBase64WebSafe (v: string): string {\n        return this.envctx.toBase64WebSafe(v)\n    }\n\n    generateBoundaries (): void {\n        this.boundaries = {\n            mixed: Math.random().toString(36).slice(2),\n            alt: Math.random().toString(36).slice(2),\n            related: Math.random().toString(36).slice(2)\n        }\n    }\n\n    isArray (v: unknown): v is unknown[] {\n        return (!!v) && (v.constructor === Array)\n    }\n\n    isObject (v: unknown): v is object {\n        return (!!v) && (v.constructor === Object)\n    }\n}\n\nexport interface EnvironmentContext {\n    toBase64: (v: string) => string\n    toBase64WebSafe: (v: string) => string\n    eol: string\n    validateContentType: (v: string) => string | false\n}\n\nexport interface Boundaries {\n    mixed: string\n    alt: string\n    related: string\n}\n\nexport type ContentTransferEncoding = '7bit' | '8bit' | 'binary' | 'quoted-printable' | 'base64'\n\nexport interface ContentHeaders {\n    'Content-Type'?: string\n    'Content-Transfer-Encoding'?: ContentTransferEncoding\n    'Content-Disposition'?: string\n    'Content-ID'?: string\n    [index: string]: string | undefined\n}\n\nexport interface ContentOptions {\n    data: string\n    encoding?: ContentTransferEncoding\n    contentType: string\n    headers?: ContentHeaders\n    charset?: string\n}\n\nexport interface AttachmentOptions extends ContentOptions {\n    inline?: boolean\n    filename: string\n}\n","import { EOL } from 'node:os'\nimport * as mime from 'mime-types'\nimport { MIMEMessage } from '../MIMEMessage.js'\n\nconst envctx = {\n    toBase64: function toBase64 (data: string) {\n        return (Buffer.from(data)).toString('base64')\n    },\n    toBase64WebSafe: function toBase64WebSafe (data: string) {\n        return (Buffer.from(data)).toString('base64')\n            .replace(/\\+/g, '-')\n            .replace(/\\//g, '_')\n            .replace(/=+$/, '')\n    },\n    eol: EOL,\n    validateContentType: (v: string): string | false => {\n        return mime.contentType(v)\n    }\n}\n\nexport function createMimeMessage (): MIMEMessage {\n    return new MIMEMessage(envctx)\n}\n\nexport { MIMEMessage } from '../MIMEMessage.js'\nexport { Mailbox } from '../Mailbox.js'\nexport { MIMETextError } from '../MIMETextError.js'\nexport { MIMEMessageHeader } from '../MIMEMessageHeader.js'\nexport { MIMEMessageContent } from '../MIMEMessageContent.js'\n\nexport type * from '../MIMEMessage.js'\nexport type * from '../Mailbox.js'\nexport type * from '../MIMETextError.js'\nexport type * from '../MIMEMessageHeader.js'\nexport type * from '../MIMEMessageContent.js'\n"],"names":["MIMETextError","Error","name","description","constructor","message","super","this","Mailbox","reSpecCompliantAddr","addr","type","input","config","parse","getAddrDomain","includes","arr","split","length","dump","isMailboxAddrObject","isMailboxAddrText","text","trim","startsWith","endsWith","slice","test","v","isObject","Object","hasOwn","MIMEMessageHeader","envctx","fields","generator","Date","toUTCString","replace","required","validate","validateMailboxSingle","dumpMailboxSingle","validateMailboxMulti","dumpMailboxMulti","Math","random","toString","filter","obj","value","toBase64","lines","field","disabled","isValueDefinedByUser","undefined","strval","eol","toObject","reduce","memo","item","get","ind","findIndex","toLowerCase","set","fieldMatcher","some","setCustom","custom","isHeaderField","push","isArrayOfMailboxes","map","join","validProps","h","keys","prop","isArray","every","Array","MIMEMessageContentHeader","MIMEMessageContent","headers","data","setHeaders","isAttachment","disposition","isInlineAttachment","setHeader","getHeader","getHeaders","MIMEMessage","boundaries","mixed","alt","related","validTypes","validContentTransferEncodings","messages","generateBoundaries","asRaw","plaintext","getMessageByType","html","primaryMessage","hasAttachments","hasInlineAttachments","structure","attachments","getAttachments","a","inlineAttachments","getInlineAttachments","dumpTextContent","asEncoded","toBase64WebSafe","boundary","msg","matcher","addAttachment","opts","filename","contentType","validateContentType","encoding","contentId","inline","assign","_addMessage","addMessage","charset","setSender","mailbox","getSender","setRecipients","recs","_input","getRecipients","setRecipient","setTo","setCc","setBcc","setSubject","getSubject","Buffer","from","EOL","mime","createMimeMessage"],"mappings":"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"}