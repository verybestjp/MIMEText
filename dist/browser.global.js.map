{"version":3,"sources":["../node_modules/js-base64/base64.mjs","../src/MIMETextError.ts","../src/Mailbox.ts","../src/MIMEMessageHeader.ts","../src/MIMEMessageContent.ts","../src/MIMEMessage.ts","../src/entrypoints/browser.ts"],"names":["version","VERSION","_hasBuffer","_TD","_TE","b64ch","b64chs","b64tab","a","tab","c","i","b64re","_fromCC","_U8Afrom","it","_mkUriSafe","src","m0","_tidyB64","s","btoaPolyfill","bin","u32","c0","c1","c2","asc","pad","_btoa","_fromUint8Array","u8a","strs","l","fromUint8Array","urlsafe","cb_utob","cc","re_utob","utob","u","_encode","encode","encodeURI","re_btou","cb_btou","cccc","cp","offset","btou","b","atobPolyfill","u24","r1","r2","_atob","_toUint8Array","toUint8Array","_unURI","_decode","decode","isValid","_noEnum","v","extendString","_add","name","body","extendUint8Array","extendBuiltins","gBase64","MIMETextError","message","description","__publicField","Mailbox","input","config","arr","text","MIMEMessageHeader","envctx","randomstr","domain","obj","lines","field","isValueDefinedByUser","strval","memo","item","fieldMatcher","ind","value","dump","validProps","h","prop","MIMEMessageContentHeader","MIMEMessageContent","data","headers","eol","disposition","MIMEMessage","plaintext","html","primaryMessage","hasAttachments","hasInlineAttachments","structure","attachments","inlineAttachments","boundary","msg","matcher","type","opts","encoding","contentId","charset","mailbox","recs","_input","createMimeMessage"],"mappings":"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","sourcesContent":["/**\n *  base64.ts\n *\n *  Licensed under the BSD 3-Clause License.\n *    http://opensource.org/licenses/BSD-3-Clause\n *\n *  References:\n *    http://en.wikipedia.org/wiki/Base64\n *\n * @author Dan Kogai (https://github.com/dankogai)\n */\nconst version = '3.7.7';\n/**\n * @deprecated use lowercase `version`.\n */\nconst VERSION = version;\nconst _hasBuffer = typeof Buffer === 'function';\nconst _TD = typeof TextDecoder === 'function' ? new TextDecoder() : undefined;\nconst _TE = typeof TextEncoder === 'function' ? new TextEncoder() : undefined;\nconst b64ch = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nconst b64chs = Array.prototype.slice.call(b64ch);\nconst b64tab = ((a) => {\n    let tab = {};\n    a.forEach((c, i) => tab[c] = i);\n    return tab;\n})(b64chs);\nconst b64re = /^(?:[A-Za-z\\d+\\/]{4})*?(?:[A-Za-z\\d+\\/]{2}(?:==)?|[A-Za-z\\d+\\/]{3}=?)?$/;\nconst _fromCC = String.fromCharCode.bind(String);\nconst _U8Afrom = typeof Uint8Array.from === 'function'\n    ? Uint8Array.from.bind(Uint8Array)\n    : (it) => new Uint8Array(Array.prototype.slice.call(it, 0));\nconst _mkUriSafe = (src) => src\n    .replace(/=/g, '').replace(/[+\\/]/g, (m0) => m0 == '+' ? '-' : '_');\nconst _tidyB64 = (s) => s.replace(/[^A-Za-z0-9\\+\\/]/g, '');\n/**\n * polyfill version of `btoa`\n */\nconst btoaPolyfill = (bin) => {\n    // console.log('polyfilled');\n    let u32, c0, c1, c2, asc = '';\n    const pad = bin.length % 3;\n    for (let i = 0; i < bin.length;) {\n        if ((c0 = bin.charCodeAt(i++)) > 255 ||\n            (c1 = bin.charCodeAt(i++)) > 255 ||\n            (c2 = bin.charCodeAt(i++)) > 255)\n            throw new TypeError('invalid character found');\n        u32 = (c0 << 16) | (c1 << 8) | c2;\n        asc += b64chs[u32 >> 18 & 63]\n            + b64chs[u32 >> 12 & 63]\n            + b64chs[u32 >> 6 & 63]\n            + b64chs[u32 & 63];\n    }\n    return pad ? asc.slice(0, pad - 3) + \"===\".substring(pad) : asc;\n};\n/**\n * does what `window.btoa` of web browsers do.\n * @param {String} bin binary string\n * @returns {string} Base64-encoded string\n */\nconst _btoa = typeof btoa === 'function' ? (bin) => btoa(bin)\n    : _hasBuffer ? (bin) => Buffer.from(bin, 'binary').toString('base64')\n        : btoaPolyfill;\nconst _fromUint8Array = _hasBuffer\n    ? (u8a) => Buffer.from(u8a).toString('base64')\n    : (u8a) => {\n        // cf. https://stackoverflow.com/questions/12710001/how-to-convert-uint8-array-to-base64-encoded-string/12713326#12713326\n        const maxargs = 0x1000;\n        let strs = [];\n        for (let i = 0, l = u8a.length; i < l; i += maxargs) {\n            strs.push(_fromCC.apply(null, u8a.subarray(i, i + maxargs)));\n        }\n        return _btoa(strs.join(''));\n    };\n/**\n * converts a Uint8Array to a Base64 string.\n * @param {boolean} [urlsafe] URL-and-filename-safe a la RFC4648 §5\n * @returns {string} Base64 string\n */\nconst fromUint8Array = (u8a, urlsafe = false) => urlsafe ? _mkUriSafe(_fromUint8Array(u8a)) : _fromUint8Array(u8a);\n// This trick is found broken https://github.com/dankogai/js-base64/issues/130\n// const utob = (src: string) => unescape(encodeURIComponent(src));\n// reverting good old fationed regexp\nconst cb_utob = (c) => {\n    if (c.length < 2) {\n        var cc = c.charCodeAt(0);\n        return cc < 0x80 ? c\n            : cc < 0x800 ? (_fromCC(0xc0 | (cc >>> 6))\n                + _fromCC(0x80 | (cc & 0x3f)))\n                : (_fromCC(0xe0 | ((cc >>> 12) & 0x0f))\n                    + _fromCC(0x80 | ((cc >>> 6) & 0x3f))\n                    + _fromCC(0x80 | (cc & 0x3f)));\n    }\n    else {\n        var cc = 0x10000\n            + (c.charCodeAt(0) - 0xD800) * 0x400\n            + (c.charCodeAt(1) - 0xDC00);\n        return (_fromCC(0xf0 | ((cc >>> 18) & 0x07))\n            + _fromCC(0x80 | ((cc >>> 12) & 0x3f))\n            + _fromCC(0x80 | ((cc >>> 6) & 0x3f))\n            + _fromCC(0x80 | (cc & 0x3f)));\n    }\n};\nconst re_utob = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFFF]|[^\\x00-\\x7F]/g;\n/**\n * @deprecated should have been internal use only.\n * @param {string} src UTF-8 string\n * @returns {string} UTF-16 string\n */\nconst utob = (u) => u.replace(re_utob, cb_utob);\n//\nconst _encode = _hasBuffer\n    ? (s) => Buffer.from(s, 'utf8').toString('base64')\n    : _TE\n        ? (s) => _fromUint8Array(_TE.encode(s))\n        : (s) => _btoa(utob(s));\n/**\n * converts a UTF-8-encoded string to a Base64 string.\n * @param {boolean} [urlsafe] if `true` make the result URL-safe\n * @returns {string} Base64 string\n */\nconst encode = (src, urlsafe = false) => urlsafe\n    ? _mkUriSafe(_encode(src))\n    : _encode(src);\n/**\n * converts a UTF-8-encoded string to URL-safe Base64 RFC4648 §5.\n * @returns {string} Base64 string\n */\nconst encodeURI = (src) => encode(src, true);\n// This trick is found broken https://github.com/dankogai/js-base64/issues/130\n// const btou = (src: string) => decodeURIComponent(escape(src));\n// reverting good old fationed regexp\nconst re_btou = /[\\xC0-\\xDF][\\x80-\\xBF]|[\\xE0-\\xEF][\\x80-\\xBF]{2}|[\\xF0-\\xF7][\\x80-\\xBF]{3}/g;\nconst cb_btou = (cccc) => {\n    switch (cccc.length) {\n        case 4:\n            var cp = ((0x07 & cccc.charCodeAt(0)) << 18)\n                | ((0x3f & cccc.charCodeAt(1)) << 12)\n                | ((0x3f & cccc.charCodeAt(2)) << 6)\n                | (0x3f & cccc.charCodeAt(3)), offset = cp - 0x10000;\n            return (_fromCC((offset >>> 10) + 0xD800)\n                + _fromCC((offset & 0x3FF) + 0xDC00));\n        case 3:\n            return _fromCC(((0x0f & cccc.charCodeAt(0)) << 12)\n                | ((0x3f & cccc.charCodeAt(1)) << 6)\n                | (0x3f & cccc.charCodeAt(2)));\n        default:\n            return _fromCC(((0x1f & cccc.charCodeAt(0)) << 6)\n                | (0x3f & cccc.charCodeAt(1)));\n    }\n};\n/**\n * @deprecated should have been internal use only.\n * @param {string} src UTF-16 string\n * @returns {string} UTF-8 string\n */\nconst btou = (b) => b.replace(re_btou, cb_btou);\n/**\n * polyfill version of `atob`\n */\nconst atobPolyfill = (asc) => {\n    // console.log('polyfilled');\n    asc = asc.replace(/\\s+/g, '');\n    if (!b64re.test(asc))\n        throw new TypeError('malformed base64.');\n    asc += '=='.slice(2 - (asc.length & 3));\n    let u24, bin = '', r1, r2;\n    for (let i = 0; i < asc.length;) {\n        u24 = b64tab[asc.charAt(i++)] << 18\n            | b64tab[asc.charAt(i++)] << 12\n            | (r1 = b64tab[asc.charAt(i++)]) << 6\n            | (r2 = b64tab[asc.charAt(i++)]);\n        bin += r1 === 64 ? _fromCC(u24 >> 16 & 255)\n            : r2 === 64 ? _fromCC(u24 >> 16 & 255, u24 >> 8 & 255)\n                : _fromCC(u24 >> 16 & 255, u24 >> 8 & 255, u24 & 255);\n    }\n    return bin;\n};\n/**\n * does what `window.atob` of web browsers do.\n * @param {String} asc Base64-encoded string\n * @returns {string} binary string\n */\nconst _atob = typeof atob === 'function' ? (asc) => atob(_tidyB64(asc))\n    : _hasBuffer ? (asc) => Buffer.from(asc, 'base64').toString('binary')\n        : atobPolyfill;\n//\nconst _toUint8Array = _hasBuffer\n    ? (a) => _U8Afrom(Buffer.from(a, 'base64'))\n    : (a) => _U8Afrom(_atob(a).split('').map(c => c.charCodeAt(0)));\n/**\n * converts a Base64 string to a Uint8Array.\n */\nconst toUint8Array = (a) => _toUint8Array(_unURI(a));\n//\nconst _decode = _hasBuffer\n    ? (a) => Buffer.from(a, 'base64').toString('utf8')\n    : _TD\n        ? (a) => _TD.decode(_toUint8Array(a))\n        : (a) => btou(_atob(a));\nconst _unURI = (a) => _tidyB64(a.replace(/[-_]/g, (m0) => m0 == '-' ? '+' : '/'));\n/**\n * converts a Base64 string to a UTF-8 string.\n * @param {String} src Base64 string.  Both normal and URL-safe are supported\n * @returns {string} UTF-8 string\n */\nconst decode = (src) => _decode(_unURI(src));\n/**\n * check if a value is a valid Base64 string\n * @param {String} src a value to check\n  */\nconst isValid = (src) => {\n    if (typeof src !== 'string')\n        return false;\n    const s = src.replace(/\\s+/g, '').replace(/={0,2}$/, '');\n    return !/[^\\s0-9a-zA-Z\\+/]/.test(s) || !/[^\\s0-9a-zA-Z\\-_]/.test(s);\n};\n//\nconst _noEnum = (v) => {\n    return {\n        value: v, enumerable: false, writable: true, configurable: true\n    };\n};\n/**\n * extend String.prototype with relevant methods\n */\nconst extendString = function () {\n    const _add = (name, body) => Object.defineProperty(String.prototype, name, _noEnum(body));\n    _add('fromBase64', function () { return decode(this); });\n    _add('toBase64', function (urlsafe) { return encode(this, urlsafe); });\n    _add('toBase64URI', function () { return encode(this, true); });\n    _add('toBase64URL', function () { return encode(this, true); });\n    _add('toUint8Array', function () { return toUint8Array(this); });\n};\n/**\n * extend Uint8Array.prototype with relevant methods\n */\nconst extendUint8Array = function () {\n    const _add = (name, body) => Object.defineProperty(Uint8Array.prototype, name, _noEnum(body));\n    _add('toBase64', function (urlsafe) { return fromUint8Array(this, urlsafe); });\n    _add('toBase64URI', function () { return fromUint8Array(this, true); });\n    _add('toBase64URL', function () { return fromUint8Array(this, true); });\n};\n/**\n * extend Builtin prototypes with relevant methods\n */\nconst extendBuiltins = () => {\n    extendString();\n    extendUint8Array();\n};\nconst gBase64 = {\n    version: version,\n    VERSION: VERSION,\n    atob: _atob,\n    atobPolyfill: atobPolyfill,\n    btoa: _btoa,\n    btoaPolyfill: btoaPolyfill,\n    fromBase64: decode,\n    toBase64: encode,\n    encode: encode,\n    encodeURI: encodeURI,\n    encodeURL: encodeURI,\n    utob: utob,\n    btou: btou,\n    decode: decode,\n    isValid: isValid,\n    fromUint8Array: fromUint8Array,\n    toUint8Array: toUint8Array,\n    extendString: extendString,\n    extendUint8Array: extendUint8Array,\n    extendBuiltins: extendBuiltins\n};\n// makecjs:CUT //\nexport { version };\nexport { VERSION };\nexport { _atob as atob };\nexport { atobPolyfill };\nexport { _btoa as btoa };\nexport { btoaPolyfill };\nexport { decode as fromBase64 };\nexport { encode as toBase64 };\nexport { utob };\nexport { encode };\nexport { encodeURI };\nexport { encodeURI as encodeURL };\nexport { btou };\nexport { decode };\nexport { isValid };\nexport { fromUint8Array };\nexport { toUint8Array };\nexport { extendString };\nexport { extendUint8Array };\nexport { extendBuiltins };\n// and finally,\nexport { gBase64 as Base64 };\n","export class MIMETextError extends Error {\n    override name = ''\n    description = ''\n\n    constructor (message: string, description = '') {\n        super(description)\n\n        this.name = message\n        this.description = description\n    }\n}\n","import { MIMETextError } from './MIMETextError.js'\n\nexport class Mailbox {\n    reSpecCompliantAddr = /(([^<>\\r\\n]+)\\s)?<[^\\r\\n]+>/\n    name = ''\n    addr = ''\n    type: MailboxType = 'To'\n\n    constructor (input: MailboxAddrObject | string, config: MailboxConfig = { type: 'To' }) {\n        this.type = config.type\n\n        this.parse(input)\n    }\n\n    getAddrDomain (): string {\n        if (this.addr.includes('@')) {\n            const arr = this.addr.split('@')\n            if (arr.length > 1) return arr[1]!\n        }\n        return ''\n    }\n\n    dump (): string {\n        return this.name.length > 0 ? `\"${this.name}\" <${this.addr}>` : `<${this.addr}>`\n    }\n\n    parse (input: MailboxAddrObject | string): this {\n        if (this.isMailboxAddrObject(input)) {\n            this.addr = input.addr\n            if (typeof input.name === 'string') this.name = input.name\n            if (typeof input.type === 'string') this.type = input.type\n            return this\n        }\n\n        if (this.isMailboxAddrText(input)) {\n            const text = input.trim()\n            if (text.startsWith('<') && text.endsWith('>')) {\n                this.addr = text.slice(1, -1)\n                return this\n            }\n            const arr = text.split(' <') as [string, string]\n            arr[0] = /^(\"|')/.test(arr[0]) ? arr[0].slice(1) : arr[0]\n            arr[0] = /(\"|')$/.test(arr[0]) ? arr[0].slice(0, -1) : arr[0]\n            arr[1] = arr[1].slice(0, -1)\n            this.name = arr[0]\n            this.addr = arr[1]\n            return this\n        }\n\n        if (typeof input === 'string') {\n            this.addr = input\n            return this\n        }\n\n        throw new MIMETextError('MIMETEXT_INVALID_MAILBOX', 'Couldn\\'t recognize the input.')\n    }\n\n    isMailboxAddrText (v: unknown): boolean {\n        return typeof v === 'string' && this.reSpecCompliantAddr.test(v)\n    }\n\n    isMailboxAddrObject (v: unknown): v is MailboxAddrObject {\n        return this.isObject(v) && Object.hasOwn(v, 'addr')\n    }\n\n    isObject (v: unknown): v is object {\n        return (!!v) && (v.constructor === Object)\n    }\n}\n\nexport interface MailboxConfig {\n    type: MailboxType\n}\nexport interface MailboxAddrObject {\n    addr: string\n    name?: string\n    type?: MailboxType\n}\nexport type MailboxType = 'To' | 'From' | 'Cc' | 'Bcc'\n","import type { EnvironmentContext } from './MIMEMessage'\nimport { MIMETextError } from './MIMETextError.js'\nimport { Mailbox } from './Mailbox.js'\n\n/*\n    Headers are based on: https://www.rfc-editor.org/rfc/rfc4021#section-2.1\n    (Some are ignored as they can be added later or as a custom header.)\n*/\n\nexport class MIMEMessageHeader {\n    envctx: EnvironmentContext\n    fields: HeaderField[] = [\n        {\n            name: 'Date',\n            generator: () => ((new Date()).toUTCString()).replace(/GMT|UTC/gi, '+0000')\n        },\n        {\n            name: 'From',\n            required: true,\n            validate: (v: unknown) => this.validateMailboxSingle(v),\n            dump: (v: unknown) => this.dumpMailboxSingle(v)\n        },\n        {\n            name: 'Sender',\n            validate: (v: unknown) => this.validateMailboxSingle(v),\n            dump: (v: unknown) => this.dumpMailboxSingle(v)\n        },\n        {\n            name: 'Reply-To',\n            validate: (v: unknown) => this.validateMailboxSingle(v),\n            dump: (v: unknown) => this.dumpMailboxSingle(v)\n        },\n        {\n            name: 'To',\n            validate: (v: unknown) => this.validateMailboxMulti(v),\n            dump: (v: unknown) => this.dumpMailboxMulti(v)\n        },\n        {\n            name: 'Cc',\n            validate: (v: unknown) => this.validateMailboxMulti(v),\n            dump: (v: unknown) => this.dumpMailboxMulti(v)\n        },\n        {\n            name: 'Bcc',\n            validate: (v: unknown) => this.validateMailboxMulti(v),\n            dump: (v: unknown) => this.dumpMailboxMulti(v)\n        },\n        {\n            name: 'Message-ID',\n            generator: () => {\n                const randomstr = Math.random().toString(36).slice(2)\n                const from = (this.fields.filter((obj) => obj.name === 'From')[0]!).value as Mailbox\n                const domain = from.getAddrDomain()\n                return '<' + randomstr + '@' + domain + '>'\n            }\n        },\n        {\n            name: 'Subject',\n            required: true,\n            dump: (v: unknown) => {\n                return typeof v === 'string' ? '=?utf-8?B?' + this.envctx.toBase64(v) + '?=' : ''\n            }\n        },\n        {\n            name: 'MIME-Version',\n            generator: () => '1.0'\n        }\n    ]\n\n    constructor (envctx: EnvironmentContext) {\n        this.envctx = envctx\n    }\n\n    dump (): string {\n        let lines = ''\n\n        for (const field of this.fields) {\n            if (field.disabled) continue\n            const isValueDefinedByUser = field.value !== undefined && field.value !== null\n            if (!isValueDefinedByUser && field.required) {\n                throw new MIMETextError('MIMETEXT_MISSING_HEADER', `The \"${field.name}\" header is required.`)\n            }\n            if (!isValueDefinedByUser && typeof field.generator !== 'function') continue\n            if (!isValueDefinedByUser && typeof field.generator === 'function') field.value = field.generator()\n            const strval = Object.hasOwn(field, 'dump') && typeof field.dump === 'function'\n                ? field.dump(field.value)\n                : typeof field.value === 'string' ? field.value : ''\n            lines += `${field.name}: ${strval}${this.envctx.eol}`\n        }\n\n        return lines.slice(0, -1 * this.envctx.eol.length)\n    }\n\n    toObject (): HeadersObject {\n        return this.fields.reduce((memo: HeadersObject, item) => {\n            memo[item.name] = item.value\n            return memo\n        }, {})\n    }\n\n    get (name: string): string | Mailbox | Mailbox[] | undefined {\n        const fieldMatcher = (obj: HeaderField): boolean => obj.name.toLowerCase() === name.toLowerCase()\n        const ind = this.fields.findIndex(fieldMatcher)\n\n        return ind !== -1 ? (this.fields[ind]!).value : undefined\n    }\n\n    set (name: string, value: string | Mailbox | Mailbox[]): HeaderField {\n        const fieldMatcher = (obj: HeaderField): boolean => obj.name.toLowerCase() === name.toLowerCase()\n        const isCustomHeader = !this.fields.some(fieldMatcher)\n\n        if (!isCustomHeader) {\n            const ind = this.fields.findIndex(fieldMatcher)\n            const field = this.fields[ind]!\n            if (field.validate && !field.validate(value)) {\n                throw new MIMETextError('MIMETEXT_INVALID_HEADER_VALUE', `The value for the header \"${name}\" is invalid.`)\n            }\n            (this.fields[ind]!).value = value\n            return this.fields[ind]!\n        }\n\n        return this.setCustom({\n            name: name,\n            value: value,\n            custom: true,\n            dump: (v: unknown) => typeof v === 'string' ? v : ''\n        })\n    }\n\n    setCustom (obj: HeaderField): HeaderField {\n        if (this.isHeaderField(obj)) {\n            if (typeof obj.value !== 'string') {\n                throw new MIMETextError('MIMETEXT_INVALID_HEADER_FIELD', 'Custom header must have a value.')\n            }\n            this.fields.push(obj)\n            return obj\n        }\n\n        throw new MIMETextError('MIMETEXT_INVALID_HEADER_FIELD', 'Invalid input for custom header. It must be in type of HeaderField.')\n    }\n\n    validateMailboxSingle (v: unknown): v is Mailbox {\n        return v instanceof Mailbox\n    }\n\n    validateMailboxMulti (v: unknown): boolean {\n        return v instanceof Mailbox || this.isArrayOfMailboxes(v)\n    }\n\n    dumpMailboxMulti (v: unknown): string {\n        const dump = (item: Mailbox): string => item.name.length === 0\n            ? item.dump()\n            : `=?utf-8?B?${this.envctx.toBase64(item.name)}?= <${item.addr}>`\n        return this.isArrayOfMailboxes(v) ? v.map(dump).join(`,${this.envctx.eol} `) : v instanceof Mailbox ? dump(v) : ''\n    }\n\n    dumpMailboxSingle (v: unknown): string {\n        const dump = (item: Mailbox): string => item.name.length === 0\n            ? item.dump()\n            : `=?utf-8?B?${this.envctx.toBase64(item.name)}?= <${item.addr}>`\n        return v instanceof Mailbox ? dump(v) : ''\n    }\n\n    isHeaderField (v: unknown): v is HeaderField {\n        const validProps = ['name', 'value', 'dump', 'required', 'disabled', 'generator', 'custom']\n        if (this.isObject(v)) {\n            const h = v as HeaderField\n            if (Object.hasOwn(h, 'name') && typeof h.name === 'string' && h.name.length > 0) {\n                if (!Object.keys(h).some((prop) => !validProps.includes(prop))) {\n                    return true\n                }\n            }\n        }\n        return false\n    }\n\n    isObject (v: unknown): v is object {\n        return (!!v) && (v.constructor === Object)\n    }\n\n    isArrayOfMailboxes (v: unknown): v is Mailbox[] {\n        return this.isArray(v) && v.every((item: unknown) => item instanceof Mailbox)\n    }\n\n    isArray (v: unknown): v is never[] {\n        return (!!v) && (v.constructor === Array)\n    }\n}\n\nexport class MIMEMessageContentHeader extends MIMEMessageHeader {\n    override fields = [\n        {\n            name: 'Content-ID'\n        },\n        {\n            name: 'Content-Type'\n        },\n        {\n            name: 'Content-Transfer-Encoding'\n        },\n        {\n            name: 'Content-Disposition'\n        }\n    ]\n\n    // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n    constructor (envctx: EnvironmentContext) {\n        super(envctx)\n    }\n}\n\nexport type HeadersObject = Record<string, string | Mailbox | Mailbox[] | undefined>\nexport interface HeaderField {\n    name: string\n    dump?: (v: string | Mailbox | Mailbox[] | undefined) => string\n    value?: string | Mailbox | Mailbox[] | undefined\n    validate?: (v: unknown) => boolean\n    required?: boolean\n    disabled?: boolean\n    generator?: () => string\n    custom?: boolean\n}\n","import type { EnvironmentContext } from './MIMEMessage'\nimport type { Mailbox } from './Mailbox'\nimport { type HeadersObject, MIMEMessageContentHeader } from './MIMEMessageHeader.js'\n\nexport class MIMEMessageContent {\n    envctx: EnvironmentContext\n    headers\n    data\n\n    constructor (envctx: EnvironmentContext, data: string, headers = {}) {\n        this.envctx = envctx\n        this.headers = new MIMEMessageContentHeader(this.envctx)\n        this.data = data\n        this.setHeaders(headers)\n    }\n\n    dump (): string {\n        const eol = this.envctx.eol\n        return this.headers.dump() + eol + eol + this.data\n    }\n\n    isAttachment (): boolean {\n        const disposition = this.headers.get('Content-Disposition')\n        return typeof disposition === 'string' && disposition.includes('attachment')\n    }\n\n    isInlineAttachment (): boolean {\n        const disposition = this.headers.get('Content-Disposition')\n        return typeof disposition === 'string' && disposition.includes('inline')\n    }\n\n    setHeader (name: string, value: string | Mailbox | Mailbox[]): string {\n        this.headers.set(name, value)\n        return name\n    }\n\n    getHeader (name: string): string | Mailbox | Mailbox[] | undefined {\n        return this.headers.get(name)\n    }\n\n    setHeaders (obj: Record<string, string | Mailbox | Mailbox[]>): string[] {\n        return Object.keys(obj).map((prop) => this.setHeader(prop, obj[prop]!))\n    }\n\n    getHeaders (): HeadersObject {\n        return this.headers.toObject()\n    }\n}\n","import type { MailboxAddrObject, MailboxConfig } from './Mailbox.js'\n\nimport { MIMETextError } from './MIMETextError.js'\nimport { type HeadersObject, MIMEMessageHeader } from './MIMEMessageHeader.js'\nimport { Mailbox } from './Mailbox.js'\nimport { MIMEMessageContent } from './MIMEMessageContent.js'\n\nexport class MIMEMessage {\n    envctx: EnvironmentContext\n    headers: MIMEMessageHeader\n    boundaries: Boundaries = { mixed: '', alt: '', related: '' }\n    validTypes = ['text/html', 'text/plain']\n    validContentTransferEncodings = ['7bit', '8bit', 'binary', 'quoted-printable', 'base64']\n    messages: MIMEMessageContent[] = []\n\n    constructor (envctx: EnvironmentContext) {\n        this.envctx = envctx\n        this.headers = new MIMEMessageHeader(this.envctx)\n        this.messages = []\n\n        this.generateBoundaries()\n    }\n\n    asRaw (): string {\n        const eol = this.envctx.eol\n        const lines = this.headers.dump()\n\n        const plaintext = this.getMessageByType('text/plain')\n        const html = this.getMessageByType('text/html')\n        const primaryMessage = html ?? (plaintext ?? undefined)\n\n        if (primaryMessage === undefined) {\n            throw new MIMETextError('MIMETEXT_MISSING_BODY', 'No content added to the message.')\n        }\n\n        const hasAttachments = this.hasAttachments()\n        const hasInlineAttachments = this.hasInlineAttachments()\n\n        const structure = hasInlineAttachments && hasAttachments\n            ? 'mixed+related'\n            : hasAttachments\n                ? 'mixed'\n                : hasInlineAttachments\n                    ? 'related'\n                    : plaintext && html\n                        ? 'alternative'\n                        : ''\n\n        if (structure === 'mixed+related') {\n            const attachments = this.getAttachments()\n                .map((a) => '--' + this.boundaries.mixed + eol + a.dump() + eol + eol)\n                .join('')\n                .slice(0, -1 * eol.length)\n            const inlineAttachments = this.getInlineAttachments()\n                .map((a) => '--' + this.boundaries.related + eol + a.dump() + eol + eol)\n                .join('')\n                .slice(0, -1 * eol.length)\n            return lines + eol +\n                'Content-Type: multipart/mixed; boundary=' + this.boundaries.mixed + eol +\n                eol +\n                '--' + this.boundaries.mixed + eol +\n                'Content-Type: multipart/related; boundary=' + this.boundaries.related + eol +\n                eol +\n                this.dumpTextContent(plaintext, html, this.boundaries.related) + eol +\n                eol +\n                inlineAttachments +\n                '--' + this.boundaries.related + '--' + eol +\n                attachments +\n                '--' + this.boundaries.mixed + '--'\n        } else if (structure === 'mixed') {\n            const attachments = this.getAttachments()\n                .map((a) => '--' + this.boundaries.mixed + eol + a.dump() + eol + eol)\n                .join('')\n                .slice(0, -1 * eol.length)\n            return lines + eol +\n                'Content-Type: multipart/mixed; boundary=' + this.boundaries.mixed + eol +\n                eol +\n                this.dumpTextContent(plaintext, html, this.boundaries.mixed) + eol +\n                (plaintext && html ? '' : eol) +\n                attachments +\n                '--' + this.boundaries.mixed + '--'\n        } else if (structure === 'related') {\n            const inlineAttachments = this.getInlineAttachments()\n                .map((a) => '--' + this.boundaries.related + eol + a.dump() + eol + eol)\n                .join('')\n                .slice(0, -1 * eol.length)\n            return lines + eol +\n                'Content-Type: multipart/related; boundary=' + this.boundaries.related + eol +\n                eol +\n                this.dumpTextContent(plaintext, html, this.boundaries.related) + eol +\n                eol +\n                inlineAttachments +\n                '--' + this.boundaries.related + '--'\n        } else if (structure === 'alternative') {\n            return lines + eol +\n                'Content-Type: multipart/alternative; boundary=' + this.boundaries.alt + eol +\n                eol +\n                this.dumpTextContent(plaintext, html, this.boundaries.alt) + eol +\n                eol +\n                '--' + this.boundaries.alt + '--'\n        } else {\n            return lines + eol + primaryMessage.dump()\n        }\n    }\n\n    asEncoded (): string {\n        return this.envctx.toBase64WebSafe(this.asRaw())\n    }\n\n    dumpTextContent (plaintext: MIMEMessageContent | undefined, html: MIMEMessageContent | undefined, boundary: string): string {\n        const eol = this.envctx.eol\n        const primaryMessage = html ?? plaintext\n\n        let data = ''\n\n        if (plaintext && html && !this.hasInlineAttachments() && this.hasAttachments()) {\n            data = '--' + boundary + eol +\n                'Content-Type: multipart/alternative; boundary=' + this.boundaries.alt + eol +\n                eol +\n                '--' + this.boundaries.alt + eol +\n                plaintext.dump() + eol +\n                eol +\n                '--' + this.boundaries.alt + eol +\n                html.dump() + eol +\n                eol +\n                '--' + this.boundaries.alt + '--'\n        } else if (plaintext && html && this.hasInlineAttachments()) {\n            data = '--' + boundary + eol +\n                html.dump()\n        } else if (plaintext && html) {\n            data = '--' + boundary + eol +\n                plaintext.dump() + eol +\n                eol +\n                '--' + boundary + eol +\n                html.dump()\n        } else {\n            data = '--' + boundary + eol +\n                (primaryMessage!).dump()\n        }\n\n        return data\n    }\n\n    hasInlineAttachments (): boolean {\n        return this.messages.some((msg) => msg.isInlineAttachment())\n    }\n\n    hasAttachments (): boolean {\n        return this.messages.some((msg) => msg.isAttachment())\n    }\n\n    getAttachments (): MIMEMessageContent[] | [] {\n        const matcher = (msg: MIMEMessageContent): boolean => msg.isAttachment()\n        return this.messages.some(matcher) ? this.messages.filter(matcher) : []\n    }\n\n    getInlineAttachments (): MIMEMessageContent[] | [] {\n        const matcher = (msg: MIMEMessageContent): boolean => msg.isInlineAttachment()\n        return this.messages.some(matcher) ? this.messages.filter(matcher) : []\n    }\n\n    getMessageByType (type: string): MIMEMessageContent | undefined {\n        const matcher = (msg: MIMEMessageContent): boolean => !msg.isAttachment() && !msg.isInlineAttachment() && (msg.getHeader('Content-Type') as string || '').includes(type)\n        return this.messages.some(matcher) ? this.messages.filter(matcher)[0] : undefined\n    }\n\n    addAttachment (opts: AttachmentOptions): MIMEMessageContent {\n        if (!this.isObject(opts.headers)) opts.headers = {}\n\n        if (typeof opts.filename !== 'string') {\n            throw new MIMETextError('MIMETEXT_MISSING_FILENAME', 'The property \"filename\" must exist while adding attachments.')\n        }\n\n        let type = (opts.headers['Content-Type'] ?? opts.contentType) || 'none'\n        if (this.envctx.validateContentType(type) === false) {\n            throw new MIMETextError('MIMETEXT_INVALID_MESSAGE_TYPE', `You specified an invalid content type \"${type}\".`)\n        }\n\n        const encoding = (opts.headers['Content-Transfer-Encoding'] ?? opts.encoding) ?? 'base64'\n        if (!this.validContentTransferEncodings.includes(encoding)) {\n            type = 'application/octet-stream'\n        }\n\n        const contentId = opts.headers['Content-ID']\n        if (typeof contentId === 'string' && contentId.length > 2 && !contentId.startsWith('<') && !contentId.endsWith('>')) {\n            opts.headers['Content-ID'] = '<' + opts.headers['Content-ID'] + '>'\n        }\n\n        const disposition = opts.inline ? 'inline' : 'attachment'\n\n        opts.headers = Object.assign({}, opts.headers, {\n            'Content-Type': `${type}; name*=utf-8\\'\\'${encodeURIComponent(opts.filename)}`,\n            'Content-Transfer-Encoding': encoding,\n            'Content-Disposition': `${disposition}; filename*=utf-8\\'\\'${encodeURIComponent(opts.filename)}`\n        })\n\n        return this._addMessage({ data: opts.data, headers: opts.headers })\n    }\n\n    addMessage (opts: ContentOptions): MIMEMessageContent {\n        if (!this.isObject(opts.headers)) opts.headers = {}\n\n        let type = (opts.headers['Content-Type'] ?? opts.contentType) || 'none'\n        if (!this.validTypes.includes(type)) {\n            throw new MIMETextError('MIMETEXT_INVALID_MESSAGE_TYPE', `Valid content types are ${this.validTypes.join(', ')} but you specified \"${type}\".`)\n        }\n\n        const encoding = (opts.headers['Content-Transfer-Encoding'] ?? opts.encoding) ?? '7bit'\n        if (!this.validContentTransferEncodings.includes(encoding)) {\n            type = 'application/octet-stream'\n        }\n\n        const charset = opts.charset ?? 'UTF-8'\n\n        opts.headers = Object.assign({}, opts.headers, {\n            'Content-Type': `${type}; charset=${charset}`,\n            'Content-Transfer-Encoding': encoding\n        })\n\n        return this._addMessage({ data: opts.data, headers: opts.headers })\n    }\n\n    private _addMessage (opts: { data: string, headers: ContentHeaders }): MIMEMessageContent {\n        const msg = new MIMEMessageContent(this.envctx, opts.data, opts.headers)\n\n        this.messages.push(msg)\n\n        return msg\n    }\n\n    setSender (input: MailboxAddrObject | string, config: MailboxConfig = { type: 'From' }): Mailbox {\n        const mailbox = new Mailbox(input, config)\n        this.setHeader('From', mailbox)\n        return mailbox\n    }\n\n    getSender (): Mailbox | undefined {\n        return this.getHeader('From') as Mailbox\n    }\n\n    setRecipients (input: MailboxAddrObject | string | MailboxAddrObject[] | string[], config: MailboxConfig = { type: 'To' }): Mailbox[] {\n        const arr = !this.isArray(input) ? [input] : input\n        const recs = arr.map((_input) => new Mailbox(_input, config))\n        this.setHeader(config.type, recs)\n        return recs\n    }\n\n    getRecipients (config: MailboxConfig = { type: 'To' }): Mailbox | Mailbox[] | undefined {\n        return this.getHeader(config.type) as Mailbox | Mailbox[] | undefined\n    }\n\n    setRecipient (input: MailboxAddrObject | string | MailboxAddrObject[] | string[], config: MailboxConfig = { type: 'To' }): Mailbox[] {\n        return this.setRecipients(input, config)\n    }\n\n    setTo (input: MailboxAddrObject | string | MailboxAddrObject[] | string[], config: MailboxConfig = { type: 'To' }): Mailbox[] {\n        return this.setRecipients(input, config)\n    }\n\n    setCc (input: MailboxAddrObject | string | MailboxAddrObject[] | string[], config: MailboxConfig = { type: 'Cc' }): Mailbox[] {\n        return this.setRecipients(input, config)\n    }\n\n    setBcc (input: MailboxAddrObject | string | MailboxAddrObject[] | string[], config: MailboxConfig = { type: 'Bcc' }): Mailbox[] {\n        return this.setRecipients(input, config)\n    }\n\n    setSubject (value: string): string {\n        this.setHeader('subject', value)\n        return value\n    }\n\n    getSubject (): string | undefined {\n        return this.getHeader('subject') as string\n    }\n\n    setHeader (name: string, value: string | Mailbox | Mailbox[]): string {\n        this.headers.set(name, value)\n        return name\n    }\n\n    getHeader (name: string): string | Mailbox | Mailbox[] | undefined {\n        return this.headers.get(name)\n    }\n\n    setHeaders (obj: Record<string, string | Mailbox | Mailbox[]>): string[] {\n        return Object.keys(obj).map((prop) => this.setHeader(prop, obj[prop]!))\n    }\n\n    getHeaders (): HeadersObject {\n        return this.headers.toObject()\n    }\n\n    toBase64 (v: string): string {\n        return this.envctx.toBase64(v)\n    }\n\n    toBase64WebSafe (v: string): string {\n        return this.envctx.toBase64WebSafe(v)\n    }\n\n    generateBoundaries (): void {\n        this.boundaries = {\n            mixed: Math.random().toString(36).slice(2),\n            alt: Math.random().toString(36).slice(2),\n            related: Math.random().toString(36).slice(2)\n        }\n    }\n\n    isArray (v: unknown): v is unknown[] {\n        return (!!v) && (v.constructor === Array)\n    }\n\n    isObject (v: unknown): v is object {\n        return (!!v) && (v.constructor === Object)\n    }\n}\n\nexport interface EnvironmentContext {\n    toBase64: (v: string) => string\n    toBase64WebSafe: (v: string) => string\n    eol: string\n    validateContentType: (v: string) => string | false\n}\n\nexport interface Boundaries {\n    mixed: string\n    alt: string\n    related: string\n}\n\nexport type ContentTransferEncoding = '7bit' | '8bit' | 'binary' | 'quoted-printable' | 'base64'\n\nexport interface ContentHeaders {\n    'Content-Type'?: string\n    'Content-Transfer-Encoding'?: ContentTransferEncoding\n    'Content-Disposition'?: string\n    'Content-ID'?: string\n    [index: string]: string | undefined\n}\n\nexport interface ContentOptions {\n    data: string\n    encoding?: ContentTransferEncoding\n    contentType: string\n    headers?: ContentHeaders\n    charset?: string\n}\n\nexport interface AttachmentOptions extends ContentOptions {\n    inline?: boolean\n    filename: string\n}\n","import { Base64 } from 'js-base64'\nimport { MIMEMessage } from '../MIMEMessage.js'\n\nconst envctx = {\n    toBase64: function toBase64 (data: string) {\n        return Base64.encode(data)\n    },\n    toBase64WebSafe: function toBase64WebSafe (data: string) {\n        return Base64.encodeURI(data)\n    },\n    eol: '\\r\\n',\n    validateContentType: (v: string): string | false => {\n        return v.length > 0 ? v : false\n    }\n}\n\nexport function createMimeMessage (): MIMEMessage {\n    return new MIMEMessage(envctx)\n}\n\nexport { MIMEMessage } from '../MIMEMessage.js'\nexport { Mailbox } from '../Mailbox.js'\nexport { MIMETextError } from '../MIMETextError.js'\nexport { MIMEMessageHeader } from '../MIMEMessageHeader.js'\nexport { MIMEMessageContent } from '../MIMEMessageContent.js'\n\nexport type * from '../MIMEMessage.js'\nexport type * from '../Mailbox.js'\nexport type * from '../MIMETextError.js'\nexport type * from '../MIMEMessageHeader.js'\nexport type * from '../MIMEMessageContent.js'\n"]}